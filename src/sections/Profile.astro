---

---

<form class="max-w-md mx-auto md:min-w-96">
  <h1 class="text-3xl font-black text-center text-primary mb-8">
    Cuenta de <span id="username-container"></span>
  </h1>

  <div class="relative z-0 w-full mb-5 group">
    <input
      type="email"
      id="floating-email"
      class="block py-2.5 px-0 w-full text-sm focus:outline-none text-primary bg-transparent border-0 border-b-2 border-primary appearance-none peer opacity-50"
      placeholder=""
      disabled
    />
    <label
      for="floating-email"
      class="peer-focus:font-medium absolute text-sm text-primary duration-300 transform -translate-y-6 scale-75 top-3 -z-10 origin-[0] peer-focus:start-0 rtl:peer-focus:translate-x-1/4 rtl:peer-focus:left-auto peer-focus:text-primary peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-0 peer-focus:scale-75 peer-focus:-translate-y-6"
      >Correo electrónico</label
    >
  </div>

  <div class="relative z-0 w-full mb-5 group">
    <input
      type="password"
      id="floating-password"
      class="block py-2.5 px-0 w-full text-sm focus:outline-none text-primary bg-transparent border-0 border-b-2 border-primary appearance-none peer"
      placeholder=" "
    />
    <label
      for="floating-password"
      class="peer-focus:font-medium absolute text-sm text-primary duration-300 transform -translate-y-6 scale-75 top-3 -z-10 origin-[0] peer-focus:start-0 rtl:peer-focus:translate-x-1/4 peer-focus:text-primary peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-0 peer-focus:scale-75 peer-focus:-translate-y-6"
      >Nueva contraseña</label
    >
  </div>
  <div class="relative z-0 w-full mb-5 group">
    <input
      type="password"
      id="floating-password-repeat"
      class="block py-2.5 px-0 w-full text-sm focus:outline-none text-primary bg-transparent border-0 border-b-2 border-primary appearance-none peer"
      placeholder=" "
    />
    <label
      for="floating-password"
      class="peer-focus:font-medium absolute text-sm text-primary duration-300 transform -translate-y-6 scale-75 top-3 -z-10 origin-[0] peer-focus:start-0 rtl:peer-focus:translate-x-1/4 peer-focus:text-primary peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-0 peer-focus:scale-75 peer-focus:-translate-y-6"
      >Confirmar contraseña</label
    >
  </div>

  <div class="flex flex-col gap-8 w-fit">
    <button
      type="button"
      id="update-button"
      class="text-primary bg-accent border border-gray-300 hover:bg-secondary font-regular rounded-lg text-sm w-full sm:w-auto px-5 py-2.5 text-center cursor-pointer"
      >Actualizar perfil</button
    >

    <div>
      <button
        type="button"
        id="logout-button"
        class="flex items-center gap-2 text-primary opacity-50"
      >
        <i class="fa-solid fa-arrow-right-from-bracket"></i>
        <span class="flex items-center text-sm hover:underline cursor-pointer"
          >Cerrar sesión</span
        >
      </button>
    </div>
  </div>
</form>

<script>
  document.addEventListener("DOMContentLoaded", async () => {
    const usernameContainer =
      (document.getElementById("username-container") as HTMLSpanElement) ||
      null;
    const emailInput =
      (document.getElementById("floating-email") as HTMLInputElement) || null;
    const passwordInput =
      (document.getElementById("floating-password") as HTMLInputElement) ||
      null;
    const passwordRepeatInput =
      (document.getElementById(
        "floating-password-repeat"
      ) as HTMLInputElement) || null;
    const updateButton =
      (document.getElementById("update-button") as HTMLButtonElement) || null;
    const logoutButton =
      (document.getElementById("logout-button") as HTMLButtonElement) || null;

    if (
      !usernameContainer ||
      !emailInput ||
      !passwordInput ||
      !passwordRepeatInput ||
      !updateButton ||
      !logoutButton
    ) {
      console.error("Faltan elementos en el formulario.");
      return;
    }

    const token = sessionStorage.getItem("token");
    if (!token) {
      window.location.href = "/login";
      return;
    }

    let currentUser: any = null;

    async function loadUserData() {
      try {
        const response = await fetch("/api/auth/me", {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        });
        const data = await response.json();
        if (response.ok && data.user) {
          usernameContainer.textContent = data.user.username;
          emailInput.value = data.user.email;
          currentUser = data.user;
        } else {
          console.error("Error al cargar datos del usuario:", data.error);
          window.location.href = "/login";
        }
      } catch (error) {
        console.error("Error al cargar datos del usuario:", error);
      }
    }
    await loadUserData();

    updateButton.addEventListener("click", async () => {
      const newPassword = passwordInput.value.trim();
      const confirmPassword = passwordRepeatInput.value.trim();

      if (!newPassword || !confirmPassword) {
        window.toast({
          title: "Error",
          message: "Ingresa la nueva contraseña y confírmala",
          type: "error",
          dismissible: true,
          icon: true,
        });
        return;
      }
      if (newPassword !== confirmPassword) {
        window.toast({
          title: "Error",
          message: "Las contraseñas no coinciden",
          type: "error",
          dismissible: true,
          icon: true,
        });
        return;
      }

      if (!currentUser) {
        window.toast({
          title: "Error",
          message: "No se pudo cargar la información del usuario",
          type: "error",
          dismissible: true,
          icon: true,
        });
        return;
      }

      try {
        const resUpdate = await fetch(`/api/users/${currentUser.id}`, {
          method: "PATCH",
          headers: {
            "Content-Type": "application/json",
            Authorization: `bearer ${token}`,
          },
          body: JSON.stringify({ password: newPassword }),
        });
        if (resUpdate.ok) {
          window.toast({
            title: "Éxito",
            message: "Contraseña actualizada correctamente",
            type: "success",
            dismissible: true,
            icon: true,
          });
          passwordInput.value = "";
          passwordRepeatInput.value = "";

          sessionStorage.removeItem("token");
          window.location.href = "/login";
        } else {
          window.toast({
            title: "Error",
            message: "Error al actualizar la contraseña",
            type: "error",
            dismissible: true,
            icon: true,
          });
        }
      } catch (error) {
        console.error("Error al actualizar contraseña:", error);
        window.toast({
          title: "Error",
          message: "Error en la conexión con el servidor",
          type: "error",
          dismissible: true,
          icon: true,
        });
      }
    });

    logoutButton.addEventListener("click", () => {
      sessionStorage.removeItem("token");
      window.location.href = "/login";
    });
  });
</script>
